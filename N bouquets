#include <iostream>
#include <vector>
using namespace std;

bool canMake(vector<int>& bloomDay, int m, int k, int day) {
    int count = 0, bouquets = 0;
    for (int d : bloomDay) {
        if (d <= day) {
            count++;
            if (count == k) {
                bouquets++;
                count = 0;
            }
        } else {
            count = 0;
        }
    }
    return bouquets >= m;
}

int minDays(vector<int>& bloomDay, int m, int k) {
    long long total = 1LL * m * k;
    if (bloomDay.size() < total) return -1;

    int low = *min_element(bloomDay.begin(), bloomDay.end());
    int high = *max_element(bloomDay.begin(), bloomDay.end());
    int ans = -1;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (canMake(bloomDay, m, k, mid)) {
            ans = mid;
            high = mid - 1;
        } else {
            low = mid + 1;
        }
    }
    return ans;
}

int main() {
    vector<int> bloomDay = {1,10,3,10,2};
    int m = 3, k = 1;
    cout << "Minimum days: " << minDays(bloomDay, m, k) << endl;
    return 0;
}
